#!/bin/bash

# 显示使用帮助的函数
show_usage() {
  echo "用法: $0 -tag <版本号> -all <yes|no>"
  echo "  -tag: 指定安装的版本号，如果不指定则从当前分支名称获取"
  echo "  -all: 是否执行 npm install，默认为 yes"
  exit 1
}

# 解析命令行参数
while [[ "$#" -gt 0 ]]; do
  case $1 in
  -tag)
    tag="$2"
    shift 2
    ;;
  -all)
    install_deps="$2"
    shift 2
    ;;
  -h | --help)
    show_usage
    ;;
  *)
    echo -e "\033[31m未知参数: $1\033[0m"
    show_usage
    ;;
  esac
done

# 如果没有提供 -all 参数，则默认为 "yes"
install_deps="${install_deps:-yes}"

# 获取当前分支名
branchName=$(git symbolic-ref --short -q HEAD)

# 定义获取版本号的函数
getVersion() {
  local branchName="$1"

  version=$(echo "$branchName" | sed 's/^origin\///' | tr '_' '-' | tr -c '[:alnum:]-.' '.')
  version=$(echo "$version" | sed 's/\(.*\)\.\(.*\)/\1\2/')
  matcher=$(echo "$version" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

  if [ -n "$matcher" ]; then
    versionCode=$(echo "$version" | awk -v matcher="$matcher" '{print substr($0, index($0, matcher), length(matcher))}')
    preRelease=$(echo "$version" | awk -v matcher="$matcher" '{print substr($0, index($0, matcher) + length(matcher))}' | tr '-' '.' | sed 's/^\.\(.*\)/\1/')
  else
    versionCode="1.0.0"
    preRelease="$version"
  fi

  preRelease=$(echo "$preRelease" | sed 's/\([0-9]\+\)\([.]\)/\2/g')

  if [ -z "$preRelease" ]; then
    version="v$versionCode"
  else
    version="v${versionCode}-${preRelease}"
  fi

  version=$(echo "$version" | sed 's/\.\{2,\}/\./g' | sed 's/-\{2,\}/-/g' | tr '[:upper:]' '[:lower:]' | tr '.' '-')

  echo "$version"
}

# 如果没有提供 -tag 参数，则自动生成版本号
if [ -z "$tag" ]; then
  tag=$(getVersion "$branchName")
fi

# 检查 -all 参数是否为 yes 或 no
if [[ "$install_deps" != "y" && "$install_deps" != "n" ]]; then
  echo -e "\033[31m错误：-all 参数只能是 'y' 或 'n'\033[0m"
  exit 1
fi

echo -e "选定的版本号为: \033[32m$tag\033[0m"
echo -e "是否执行 npm install: \033[33m$install_deps\033[0m"
echo "按 Enter 键继续执行，或 Ctrl+C 取消"
read

echo -e "\033[32m开始安装 apaas 依赖\033[0m"

packages=(
  "@x-apaas/x-apaas-frontend-i18n"
  "@x-apaas/x-dcloud-bpm"
  "@x-apaas/x-dcloud-business-event"
  "@x-apaas/x-dcloud-business-object"
  "@x-apaas/x-dcloud-low-code-engine"
  "@x-apaas/x-dcloud-page-engine"
  "@x-apaas/x-dcloud-page-mobile"
  "@x-apaas/x-dcloud-page-web"
  "@x-apaas/x-lib-rule-engine"
)

# 逐个安装特定依赖项
for package in "${packages[@]}"; do
  npm install "${package}@$tag" || {
    echo -e "\033[31m安装 $package 失败\033[0m"
    exit 1
  }
done

# 单独处理 x-dcloud-ui 包
npm uninstall @x-ui/x-dcloud-ui
npm install --save --save-exact @x-ui/x-dcloud-ui || {
  echo -e "\033[31m安装 @x-ui/x-dcloud-ui 失败\033[0m"
  exit 1
}

# 删除指定的 node_modules 目录
rm -rf ./node_modules/@x-apaas/x-{dcloud-bpm,dcloud-business-event,dcloud-business-object,dcloud-low-code-engine,dcloud-page-engine,dcloud-page-mobile,dcloud-page-web,dcloud-questionnaire-form,lib-rule-engine}/node_modules \
  ./node_modules/@x-ui/x-{dcloud-ui,guard}/node_modules

if [ "$install_deps" = "yes" ]; then
  # 安装其他依赖项并使用缓存
  npm install || {
    echo -e "\033[31mnpm install 失败\033[0m"
    exit 1
  }
else
  echo -e "\033[33m已跳过全部依赖安装\033[0m"
fi
