#!/bin/sh

getVersion() {
  branchName=$1
  # Replace 'origin/xxxxx' with 'xxxxx', replace '_' with '-', replace any other symbol with '.'
  version=$(echo $branchName | sed 's/^origin\///' | tr '_' '-' | tr -c '[:alnum:]-.' '.')

  # 去除version结尾的第一个.号
  version=$(echo $version | sed 's/\(.*\)\.\(.*\)/\1\2/')
  # echo "version: $version"
  # Find semver version code start and end index
  matcher=$(echo $version | grep -oE '(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)')
  if [ -n "$matcher" ]; then
    # Version code like 3.2.18 from 3.2.18.2-091001-BAIDU-hotfix
    versionCode=$(echo $version | awk -v matcher="$matcher" '{print substr($0, index($0, matcher), length(matcher))}')
    # PreRelease like 2.091001.BAIDU.hotfix from .2-091001-BAIDU-hotfix
    preRelease=$(echo $version | awk -v matcher="$matcher" '{print substr($0, index($0, matcher) + length(matcher))}' | tr '-' '.' | sed 's/^\.\(.*\)/\1/')
  else
    # No match version x.y.z then default to 1.0.0, e.g. papaas-dev
    versionCode="1.0.0"
    # All parts should be preRelease
    preRelease=$version
  fi

  # Remove preRelease digital part starting with 0 like 2.91001.BAIDU.hotfix from 2.91001.BAIDU.hotfix
  preRelease=$(echo $preRelease | sed 's/\([0-9]\+\)\([.]\)/\2/g')

  if [ -z "$preRelease" ]; then
    version="v$versionCode"
  else
    version="v${versionCode}-${preRelease}"
  fi
  # echo "version: $version"

  # Reduce multiple '...' to single '.', reduce multiple '---' to single '-', and convert to lowercase
  version=$(echo $version | sed 's/\.\{2,\}/\./g' | sed 's/-\{2,\}/-/g' | tr '[:upper:]' '[:lower:]' | tr '.' '-')

  echo "$version"
}

# Example usage
branchName="papaas-qa-4"

# 使用git命令获取当前分支名
branchName=$(git symbolic-ref --short -q HEAD)
tag=$(getVersion "$branchName")
echo "$tag"

# 如果 第二个参数不为空，则使用第二个参数作为tag, 否则执行getVersion函数获取tag
if [ -n "$1" ]; then
  tag=$1
fi

# 输出tag
echo "选定的版本号为: $tag"
# 询问是否继续
read -p "是否继续执行, 按enter键将进行依赖安装..." confirm
if [[ $confirm != "" ]]; then
  exit 1
fi

# 删除当前路径下的 package-lock.json 文件
echo "\033[32m 开始安装 apaas 依赖 \033[0m"

# 定义需要安装的包数组
packages=(
  "@x-apaas/x-apaas-frontend-i18n"
  "@x-apaas/x-dcloud-bpm"
  "@x-apaas/x-dcloud-business-event"
  "@x-apaas/x-dcloud-business-object"
  "@x-apaas/x-dcloud-low-code-engine"
  "@x-apaas/x-dcloud-page-engine"
  "@x-apaas/x-dcloud-page-mobile"
  "@x-apaas/x-dcloud-page-web"
  "@x-apaas/x-lib-rule-engine"
)

# 遍历数组安装包
for package in "${packages[@]}"; do
  npm install "${package}@$tag" || exit 1
done

npm uninstall @x-ui/x-dcloud-ui
npm i --save --save-exact @x-ui/x-dcloud-ui

npm i || exit 1

# 使用一行命令删除多个目录
rm -rf ./node_modules/@x-apaas/x-{dcloud-bpm,dcloud-business-event,dcloud-business-object,dcloud-low-code-engine,dcloud-page-engine,dcloud-page-mobile,dcloud-page-web,dcloud-questionnaire-form,lib-rule-engine}/node_modules ./node_modules/@x-ui/x-{dcloud-ui,guard}/node_modules

echo -e "\033[32m 依赖安装成功 \033[0m"
